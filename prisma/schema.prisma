// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  phone     String?   @unique
  name      String?
  password     String   
  otp      Int?
  verified  Boolean    @default(false)
  blocked  Boolean    @default(false)
  hashed_refresh_token     String?   @db.Text
  role      Role     @default(USER)
  Content   Content[]
  Payment   Payment[]
  PaymentLiveSession   PaymentLiveSession[]
  LiveSessionContent   LiveSessionContent[]
  ContentAssignedBy ContentAssigned[] @relation("assignedBy")
  ContentAssignedTo ContentAssigned[] @relation("assignedTo")
  LiveSessionContentRequestedBy LiveSessionContentAssigned[] @relation("requestedBy")
}

enum Role {
  USER
  ADMIN
}

model Content {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      MEDIA_TYPE     @default(VIDEO)
  file_path String    @db.Text
  name     String  @db.Text
  heading     String  @db.Text
  description     String?   @db.Text
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  restricted  Boolean    @default(false)
  paid  Boolean    @default(false)
  AssignedContent ContentAssigned[] @relation("assignedContent")
}

enum MEDIA_TYPE {
  PDF
  VIDEO
}

model ContentAssigned {
  id        Int      @id @default(autoincrement())
  assignedBy       User?     @relation("assignedBy", fields: [assignedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assignedById     Int?
  assignedTo   User?     @relation("assignedTo", fields: [assignedToId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assignedToId Int?
  assignedContent   Content?     @relation("assignedContent", fields: [assignedContentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assignedContentId Int?
  assignedAt DateTime @default(now())
  assignedRole      AssignedRole     @default(ASSIGNED)
  PaymentInformation   Payment[]
}

enum AssignedRole {
  ASSIGNED
  PURCHASED
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      PaymentStatus     @default(PENDING)
  amount     String  @db.Text
  receipt     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  paymentDoneBy   User? @relation(fields: [paymentBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  paymentBy Int?
  forContentAssigned   ContentAssigned? @relation(fields: [forContentAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  forContentAssignedId Int?
}

enum PaymentStatus {
  PENDING
  PAID_PARTIAL
  PAID_FULL
}

model LiveSessionContent {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  name     String  @db.Text
  heading     String  @db.Text
  description     String?   @db.Text
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
  LiveSessionContentAssigned LiveSessionContentAssigned[] @relation("liveSessionContent")
}

model LiveSessionContentAssigned {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requestedBy       User?     @relation("requestedBy", fields: [requestedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  requestedById     Int?
  liveSessionContent   LiveSessionContent?     @relation("liveSessionContent", fields: [liveSessionContentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  liveSessionContentId Int?
  scheduledAt DateTime @default(now())
  scheduledOn DateTime? 
  assignedRole      AssignedRole     @default(ASSIGNED)
  status      LiveSessionContentStatus     @default(PENDING)
  PaymentInformation   PaymentLiveSession[]
}

enum LiveSessionContentStatus {
  PENDING
  USER_REQUESTED
  SCHEDULED
  COMPLETED
}

model PaymentLiveSession {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      PaymentStatus     @default(PENDING)
  amount     String  @db.Text
  receipt     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  paymentDoneBy   User? @relation(fields: [paymentBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  paymentBy Int?
  forLiveSessionContentAssigned   LiveSessionContentAssigned? @relation(fields: [forLiveSessionContentAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  forLiveSessionContentAssignedId Int?
}