// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  phone     String?   @unique
  name      String?
  password     String   
  otp      Int?
  verified  Boolean    @default(false)
  blocked  Boolean    @default(false)
  hashed_refresh_token     String?   @db.Text
  role      Role     @default(USER)
  Content   Content[]
  Payment   Payment[]
  PaymentLiveSession   PaymentLiveSession[]
  PaymentExam   PaymentExam[]
  PaymentAssessment   PaymentAssessment[]
  LiveSessionContent   LiveSessionContent[]
  Exam   Exam[]
  Assessment   Assessment[]
  ContentAssignedBy ContentAssigned[] @relation("assignedBy")
  ContentAssignedTo ContentAssigned[] @relation("assignedTo")
  LiveSessionContentRequestedBy LiveSessionContentAssigned[] @relation("requestedBy")
  Event   Event[]
  ExamQuestionAnswer   ExamQuestionAnswer[]
  AssessmentCategory   AssessmentCategory[]
  AssessmentQuestionAnswer   AssessmentQuestionAnswer[]
  ExamSelectedAnswer   ExamSelectedAnswer[] @relation("attendedBy")
  AssessmentSelectedAnswer   AssessmentSelectedAnswer[] @relation("attendedBy")
  ExamRequestedBy ExamAssigned[] @relation("requestedBy")
  AssessmentRequestedBy AssessmentAssigned[] @relation("requestedBy")
}

enum Role {
  USER
  ADMIN
}

model Content {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      MEDIA_TYPE     @default(VIDEO)
  file_path String    @db.Text
  name     String  @db.Text
  heading     String  @db.Text
  description     String?   @db.Text
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  restricted  Boolean    @default(false)
  paid  Boolean    @default(false)
  AssignedContent ContentAssigned[] @relation("assignedContent")
}

enum MEDIA_TYPE {
  PDF
  VIDEO
}

model ContentAssigned {
  id        Int      @id @default(autoincrement())
  assignedBy       User?     @relation("assignedBy", fields: [assignedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assignedById     Int?
  assignedTo   User?     @relation("assignedTo", fields: [assignedToId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assignedToId Int?
  assignedContent   Content?     @relation("assignedContent", fields: [assignedContentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assignedContentId Int?
  assignedAt DateTime @default(now())
  assignedRole      AssignedRole     @default(ASSIGNED)
  PaymentInformation   Payment[]
}

enum AssignedRole {
  ASSIGNED
  PURCHASED
}

enum ExamRole {
  ASSIGNED
  PURCHASED
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      PaymentStatus     @default(PENDING)
  amount     String  @db.Text
  receipt     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  paymentDoneBy   User? @relation(fields: [paymentBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  paymentBy Int?
  forContentAssigned   ContentAssigned? @relation(fields: [forContentAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  forContentAssignedId Int?
}

enum PaymentStatus {
  PENDING
  PAID_PARTIAL
  PAID_FULL
}

model LiveSessionContent {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  name     String  @db.Text
  heading     String  @db.Text
  description     String?   @db.Text
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
  LiveSessionContentAssigned LiveSessionContentAssigned[] @relation("liveSessionContent")
}

model LiveSessionContentAssigned {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requestedBy       User?     @relation("requestedBy", fields: [requestedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  requestedById     Int?
  liveSessionContent   LiveSessionContent?     @relation("liveSessionContent", fields: [liveSessionContentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  liveSessionContentId Int?
  scheduledAt DateTime @default(now())
  scheduledOn DateTime? 
  assignedRole      AssignedRole     @default(ASSIGNED)
  status      LiveSessionContentStatus     @default(PENDING)
  PaymentInformation   PaymentLiveSession[]
  zoom Json?
}

enum LiveSessionContentStatus {
  PENDING
  USER_REQUESTED
  SCHEDULED
  RESCHEDULED
  COMPLETED
}

model PaymentLiveSession {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      PaymentStatus     @default(PENDING)
  amount     String  @db.Text
  receipt     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  paymentDoneBy   User? @relation(fields: [paymentBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  paymentBy Int?
  forLiveSessionContentAssigned   LiveSessionContentAssigned? @relation(fields: [forLiveSessionContentAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  forLiveSessionContentAssignedId Int?
}

model Exam {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  name     String  @db.Text
  heading     String  @db.Text
  description     String?   @db.Text
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
  ExamQuestionAnswer   ExamQuestionAnswer[]
  ExamAssigned ExamAssigned[] @relation("exam")
  examSelectedAnswer   ExamSelectedAnswer[] @relation("exam")
}

model Assessment {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  name     String  @db.Text
  heading     String  @db.Text
  description     String?   @db.Text
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
  // display_graph  Boolean    @default(false)
  // display_pie_chart  Boolean    @default(false)
  // display_category_ranking  Boolean    @default(false)
  // display_analysis  Boolean    @default(false)
  // common_report_message     String?   @db.Text
  AssessmentCategory   AssessmentCategory[]
  AssessmentQuestionAnswer   AssessmentQuestionAnswer[]
  AssessmentAssigned AssessmentAssigned[] @relation("assessment")
  assessmentSelectedAnswer   AssessmentSelectedAnswer[] @relation("assessment")
}

model Enquiries {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name     String  @db.Text
  email   String    @db.Text
  phone     String  @db.Text
  message     String?   @db.Text
}
model DemoSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name     String  @db.Text
  email   String    @db.Text
  phone     String  @db.Text
  message     String?   @db.Text
}

model Event {
  id        Int      @id @default(autoincrement())
  url     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  facebook String?    @db.Text
  instagram String?    @db.Text
  twitter String?    @db.Text
  linkedin String?    @db.Text
  banner String    @db.Text
  video String    @db.Text
  title     String  @db.Text
  from_date     String
  to_date     String?
  time     String
  amount     String?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
  EventCallToAction   EventCallToAction?
  EventAbout   EventAbout?
  EventRegistration   EventRegistration[]
  EventTestimonial EventTestimonial[]
  EventInstructor EventInstructor[]
  EventSchedule EventSchedule[]
  EventGallery EventGallery[]
}

model EventCallToAction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  heading String?    @db.Text
  description String?    @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int? @unique
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
}
model EventAbout {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  heading String?    @db.Text
  description String?    @db.Text
  image String?    @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int? @unique
  draft  Boolean    @default(false)
  paid  Boolean    @default(false)
}

model EventTestimonial {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String?    @db.Text
  designation String?    @db.Text
  message String?    @db.Text
  image String?    @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int?
}

model EventInstructor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String?    @db.Text
  designation String?    @db.Text
  description String?    @db.Text
  image String?    @db.Text
  facebook String?    @db.Text
  instagram String?    @db.Text
  twitter String?    @db.Text
  linkedin String?    @db.Text
  heading     String?  @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int?
}

model EventSchedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String?    @db.Text
  description String?    @db.Text
  heading     String?  @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int?
}

model EventGallery {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int?
}

model EventRegistration {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount     String?  @db.Text
  receipt     String?   @db.Text
  name     String?   @db.Text
  phone     String?   @db.Text
  email     String?   @db.Text
  message     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  eventId Int?
}

enum CorrectAnswer {
  answer_a
  answer_b
  answer_c
  answer_d
}

model ExamQuestionAnswer {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  question     String  @db.Text
  answer_a     String?  @db.Text
  answer_b     String?   @db.Text
  answer_c     String?   @db.Text
  answer_d     String?   @db.Text
  correct_answer      CorrectAnswer     @default(answer_a)
  marks      Int? @default(1)
  duration      Int?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  exam   Exam? @relation(fields: [examId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  examId Int?
  draft  Boolean    @default(false)
  ExamAssigned ExamAssigned[] @relation("currentQuestionAnswer")
  eXamSelectedAnswer   ExamSelectedAnswer[] @relation("currentQuestionAnswer")
}

model AssessmentCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category     String  @db.Text
  choices     String?  @db.Text
  message     String?   @db.Text
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  assessment   Assessment? @relation(fields: [assessmentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assessmentId Int?
  draft  Boolean    @default(false)
  answerAChoice   AssessmentQuestionAnswer[] @relation("answer_a_choice")
  answerBChoice   AssessmentQuestionAnswer[] @relation("answer_b_choice")
  answerCChoice   AssessmentQuestionAnswer[] @relation("answer_c_choice")
  answerDChoice   AssessmentQuestionAnswer[] @relation("answer_d_choice")
  selectedChoice   AssessmentSelectedAnswer[] @relation("selected_answer")
}

model AssessmentQuestionAnswer {
  id        Int      @id @default(autoincrement())
  uuid     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?    @db.Text
  question     String  @db.Text
  answer_a     String?  @db.Text
  answer_a_choice   AssessmentCategory?     @relation("answer_a_choice", fields: [answer_a_choice_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  answer_a_choice_id Int?
  answer_b     String?   @db.Text
  answer_b_choice   AssessmentCategory?     @relation("answer_b_choice", fields: [answer_b_choice_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  answer_b_choice_id Int?
  answer_c     String?   @db.Text
  answer_c_choice   AssessmentCategory?     @relation("answer_c_choice", fields: [answer_c_choice_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  answer_c_choice_id Int?
  answer_d     String?   @db.Text
  answer_d_choice   AssessmentCategory?     @relation("answer_d_choice", fields: [answer_d_choice_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  answer_d_choice_id Int?
  uploadBy   User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  uploadedBy Int?
  assessment   Assessment? @relation(fields: [assessmentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assessmentId Int?
  draft  Boolean    @default(false)
  AssessmentAssigned AssessmentAssigned[] @relation("currentQuestionAnswerAssigned")
  assessmentSelectedAnswer   AssessmentSelectedAnswer[] @relation("currentQuestionAnswer")
}

enum ExamStatus {
  PENDING
  ONGOING
  COMPLETED
  ABORTED
}

enum AssessmentStatus {
  PENDING
  ONGOING
  COMPLETED
}

model ExamAssigned {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requestedBy       User?     @relation("requestedBy", fields: [requestedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  requestedById     Int?
  exam   Exam?     @relation("exam", fields: [examId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  examId Int?
  currentQuestionAnswer   ExamQuestionAnswer?     @relation("currentQuestionAnswer", fields: [questionAnswerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  questionAnswerId Int?
  assignedRole      ExamRole     @default(ASSIGNED)
  status      ExamStatus     @default(PENDING)
  reason     String?  @db.Text
  PaymentInformation   PaymentExam[]
  exAmSelectedAnswer   ExamSelectedAnswer[] @relation("examAssigned")
}

model AssessmentAssigned {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requestedBy       User?     @relation("requestedBy", fields: [requestedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  requestedById     Int?
  assessment   Assessment?     @relation("assessment", fields: [assessmentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assessmentId Int?
  currentQuestionAnswerAssigned   AssessmentQuestionAnswer?     @relation("currentQuestionAnswerAssigned", fields: [questionAnswerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  questionAnswerId Int?
  assignedRole      ExamRole     @default(ASSIGNED)
  status      AssessmentStatus     @default(PENDING)
  reason     String?  @db.Text
  PaymentInformation   PaymentAssessment[]
  AssessmentSelectedAnswer   AssessmentSelectedAnswer[] @relation("assessmentAssigned")
}

model ExamSelectedAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attendedBy       User?     @relation("attendedBy", fields: [attendedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  attendedById     Int?
  exam   Exam?     @relation("exam", fields: [examId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  examId Int?
  currentQuestionAnswer   ExamQuestionAnswer?     @relation("currentQuestionAnswer", fields: [currentQuestionAnswerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  currentQuestionAnswerId Int?
  examAssigned   ExamAssigned?     @relation("examAssigned", fields: [examAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  examAssignedId Int?
  selected_answer      CorrectAnswer?     @default(answer_a)
  correct_answer      CorrectAnswer?     @default(answer_a)
  marks      Int? @default(0)
}

model AssessmentSelectedAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attendedBy       User?     @relation("attendedBy", fields: [attendedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  attendedById     Int?
  assessment   Assessment?     @relation("assessment", fields: [assessmentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assessmentId Int?
  currentQuestionAnswer   AssessmentQuestionAnswer?     @relation("currentQuestionAnswer", fields: [currentQuestionAnswerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  currentQuestionAnswerId Int?
  assessmentAssigned   AssessmentAssigned?     @relation("assessmentAssigned", fields: [assessmentAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  assessmentAssignedId Int?
  selected_answer   AssessmentCategory?     @relation("selected_answer", fields: [selected_answer_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  selected_answer_id Int?
}

model PaymentExam {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      PaymentStatus     @default(PENDING)
  amount     String  @db.Text
  receipt     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  paymentDoneBy   User? @relation(fields: [paymentBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  paymentBy Int?
  forExamAssigned   ExamAssigned? @relation(fields: [forExamAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  forExamAssignedId Int?
}

model PaymentAssessment {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      PaymentStatus     @default(PENDING)
  amount     String  @db.Text
  receipt     String?   @db.Text
  paymentReferenceId     String?   @db.Text
  paymentDoneBy   User? @relation(fields: [paymentBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
  paymentBy Int?
  forAssessmentAssigned   AssessmentAssigned? @relation(fields: [forAssessmentAssignedId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  forAssessmentAssignedId Int?
}

model IttcRegistration {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount     String?  @db.Text
  receipt     String?   @db.Text
  name     String?   @db.Text
  phone     String?   @db.Text
  email     String?   @db.Text
  message     String?   @db.Text
  status      PaymentStatus     @default(PENDING)
  paymentReferenceId     String?   @db.Text
}
model IttcAdvancedRegistration {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount     String?  @db.Text
  receipt     String?   @db.Text
  name     String?   @db.Text
  phone     String?   @db.Text
  email     String?   @db.Text
  message     String?   @db.Text
  status      PaymentStatus     @default(PENDING)
  paymentReferenceId     String?   @db.Text
}
model TtpRegistration {
  id        Int      @id @default(autoincrement())
  orderId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount     String?  @db.Text
  receipt     String?   @db.Text
  name     String?   @db.Text
  phone     String?   @db.Text
  email     String?   @db.Text
  message     String?   @db.Text
  status      PaymentStatus     @default(PENDING)
  paymentReferenceId     String?   @db.Text
}